[
  {
    "url": "https://api.github.com/repos/rails/rails/issues/20497",
    "labels_url": "https://api.github.com/repos/rails/rails/issues/20497/labels{/name}",
    "comments_url": "https://api.github.com/repos/rails/rails/issues/20497/comments",
    "events_url": "https://api.github.com/repos/rails/rails/issues/20497/events",
    "html_url": "https://github.com/rails/rails/pull/20497",
    "id": 86698342,
    "number": 20497,
    "title": "refactor ActiveRecord's #become by removing not needed code",
    "user": {
      "login": "dcrec1",
      "id": 13742,
      "avatar_url": "https://avatars.githubusercontent.com/u/13742?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dcrec1",
      "html_url": "https://github.com/dcrec1",
      "followers_url": "https://api.github.com/users/dcrec1/followers",
      "following_url": "https://api.github.com/users/dcrec1/following{/other_user}",
      "gists_url": "https://api.github.com/users/dcrec1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dcrec1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dcrec1/subscriptions",
      "organizations_url": "https://api.github.com/users/dcrec1/orgs",
      "repos_url": "https://api.github.com/users/dcrec1/repos",
      "events_url": "https://api.github.com/users/dcrec1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dcrec1/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 16,
    "created_at": "2015-06-09T18:57:45Z",
    "updated_at": "2015-06-09T22:19:20Z",
    "closed_at": null,
    "pull_request": {
      "url": "https://api.github.com/repos/rails/rails/pulls/20497",
      "html_url": "https://github.com/rails/rails/pull/20497",
      "diff_url": "https://github.com/rails/rails/pull/20497.diff",
      "patch_url": "https://github.com/rails/rails/pull/20497.patch"
    },
    "body": "This refactor throw some warnings when running the tests:\r\n\r\n    warning: instance variable @changed_attributes not initialized\r\n\r\nIf this is a problem, I can change the line to be like this:\r\n\r\n      became.instance_variable_set(\"@changed_attributes\", @changed_attributes) if defined?(@changed_attributes)\r\n"
  },
  {
    "url": "https://api.github.com/repos/rails/rails/issues/20494",
    "labels_url": "https://api.github.com/repos/rails/rails/issues/20494/labels{/name}",
    "comments_url": "https://api.github.com/repos/rails/rails/issues/20494/comments",
    "events_url": "https://api.github.com/repos/rails/rails/issues/20494/events",
    "html_url": "https://github.com/rails/rails/pull/20494",
    "id": 86667722,
    "number": 20494,
    "title": "[ActiveSupport] Fix for #20489 - ActiveSupport::Concern#class_methods affects parent classes",
    "user": {
      "login": "knovoselic",
      "id": 7026420,
      "avatar_url": "https://avatars.githubusercontent.com/u/7026420?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/knovoselic",
      "html_url": "https://github.com/knovoselic",
      "followers_url": "https://api.github.com/users/knovoselic/followers",
      "following_url": "https://api.github.com/users/knovoselic/following{/other_user}",
      "gists_url": "https://api.github.com/users/knovoselic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/knovoselic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/knovoselic/subscriptions",
      "organizations_url": "https://api.github.com/users/knovoselic/orgs",
      "repos_url": "https://api.github.com/users/knovoselic/repos",
      "events_url": "https://api.github.com/users/knovoselic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/knovoselic/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/rails/rails/labels/activesupport",
        "name": "activesupport",
        "color": "FC9300"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 8,
    "created_at": "2015-06-09T17:05:05Z",
    "updated_at": "2015-06-10T13:14:36Z",
    "closed_at": null,
    "pull_request": {
      "url": "https://api.github.com/repos/rails/rails/pulls/20494",
      "html_url": "https://github.com/rails/rails/pull/20494",
      "diff_url": "https://github.com/rails/rails/pull/20494.diff",
      "patch_url": "https://github.com/rails/rails/pull/20494.patch"
    },
    "body": "This PR includes a test that reproduces the issue described in #20489 and a fix for it. Here's a short explanation of the issue by @ewoutkleinsmann:\r\n\r\n> ActiveSupport::Concern's class_methods uses const_defined? without a second argument and therefore also searches its ancestors for a ClassMethods module. This results in concerns included in a child class that add class methods to a parent class.\r\n\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/rails/rails/issues/20490",
    "labels_url": "https://api.github.com/repos/rails/rails/issues/20490/labels{/name}",
    "comments_url": "https://api.github.com/repos/rails/rails/issues/20490/comments",
    "events_url": "https://api.github.com/repos/rails/rails/issues/20490/events",
    "html_url": "https://github.com/rails/rails/issues/20490",
    "id": 86585811,
    "number": 20490,
    "title": "Rails.logger log level is not thread safe",
    "user": {
      "login": "rdubya",
      "id": 572868,
      "avatar_url": "https://avatars.githubusercontent.com/u/572868?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rdubya",
      "html_url": "https://github.com/rdubya",
      "followers_url": "https://api.github.com/users/rdubya/followers",
      "following_url": "https://api.github.com/users/rdubya/following{/other_user}",
      "gists_url": "https://api.github.com/users/rdubya/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rdubya/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rdubya/subscriptions",
      "organizations_url": "https://api.github.com/users/rdubya/orgs",
      "repos_url": "https://api.github.com/users/rdubya/repos",
      "events_url": "https://api.github.com/users/rdubya/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rdubya/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/rails/rails/labels/activesupport",
        "name": "activesupport",
        "color": "FC9300"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 14,
    "created_at": "2015-06-09T12:39:38Z",
    "updated_at": "2015-06-09T17:26:56Z",
    "closed_at": null,
    "body": "We discovered while trying to silence certain of our requests that changing the Rails.logger level is not thread safe. The main issue appears to be that Rails.logger is a singleton. As I started digging through the ActiveSupport::Logger code, I realized that Rails.logger.silence suffers from the same issue we discovered in our codebase.\r\n\r\nI have created executable tests displaying the issue here: https://gist.github.com/rdubya/5c3ffb3e49d0c2bd42e9 We discovered the issue in JRuby, but I have gotten the tests in the gist to fail in both JRuby and MRI 2.2.\r\n\r\nIf you look at the second test case, the worst case scenario is that your log level is permanently changed to whatever level is passed to the call to #silence or ::Logger::ERROR if nothing is passed.\r\n\r\nA couple of thoughts that I had for possible solutions:\r\n- Update ActiveSupport::Logger to use thread variables to store the level (could possibly make this an option when the logger is created)\r\n- Create a new class (such as ActiveSupport::ThreadsafeLogger or ActiveSupport::Logger::Threadsafe) which extends ActiveSupport::Logger and uses thread variables to store the level\r\n- Update Rails.logger to optionally maintain separate loggers or log levels for each thread\r\n\r\nI'm willing to take a shot at creating a patch for this, but wanted to get an idea of the right direction to head down."
  },
  {
    "url": "https://api.github.com/repos/rails/rails/issues/20489",
    "labels_url": "https://api.github.com/repos/rails/rails/issues/20489/labels{/name}",
    "comments_url": "https://api.github.com/repos/rails/rails/issues/20489/comments",
    "events_url": "https://api.github.com/repos/rails/rails/issues/20489/events",
    "html_url": "https://github.com/rails/rails/issues/20489",
    "id": 86568058,
    "number": 20489,
    "title": "ActiveSupport::Concern#class_methods affects parent classes",
    "user": {
      "login": "ewoutkleinsmann",
      "id": 1263280,
      "avatar_url": "https://avatars.githubusercontent.com/u/1263280?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ewoutkleinsmann",
      "html_url": "https://github.com/ewoutkleinsmann",
      "followers_url": "https://api.github.com/users/ewoutkleinsmann/followers",
      "following_url": "https://api.github.com/users/ewoutkleinsmann/following{/other_user}",
      "gists_url": "https://api.github.com/users/ewoutkleinsmann/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ewoutkleinsmann/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ewoutkleinsmann/subscriptions",
      "organizations_url": "https://api.github.com/users/ewoutkleinsmann/orgs",
      "repos_url": "https://api.github.com/users/ewoutkleinsmann/repos",
      "events_url": "https://api.github.com/users/ewoutkleinsmann/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ewoutkleinsmann/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/rails/rails/labels/activesupport",
        "name": "activesupport",
        "color": "FC9300"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": {
      "login": "sgrif",
      "id": 1529387,
      "avatar_url": "https://avatars.githubusercontent.com/u/1529387?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sgrif",
      "html_url": "https://github.com/sgrif",
      "followers_url": "https://api.github.com/users/sgrif/followers",
      "following_url": "https://api.github.com/users/sgrif/following{/other_user}",
      "gists_url": "https://api.github.com/users/sgrif/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sgrif/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sgrif/subscriptions",
      "organizations_url": "https://api.github.com/users/sgrif/orgs",
      "repos_url": "https://api.github.com/users/sgrif/repos",
      "events_url": "https://api.github.com/users/sgrif/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sgrif/received_events",
      "type": "User",
      "site_admin": false
    },
    "milestone": {
      "url": "https://api.github.com/repos/rails/rails/milestones/40",
      "html_url": "https://github.com/rails/rails/milestones/4.2.2",
      "labels_url": "https://api.github.com/repos/rails/rails/milestones/40/labels",
      "id": 988887,
      "number": 40,
      "title": "4.2.2",
      "description": "",
      "creator": {
        "login": "rafaelfranca",
        "id": 47848,
        "avatar_url": "https://avatars.githubusercontent.com/u/47848?v=3",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rafaelfranca",
        "html_url": "https://github.com/rafaelfranca",
        "followers_url": "https://api.github.com/users/rafaelfranca/followers",
        "following_url": "https://api.github.com/users/rafaelfranca/following{/other_user}",
        "gists_url": "https://api.github.com/users/rafaelfranca/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/rafaelfranca/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/rafaelfranca/subscriptions",
        "organizations_url": "https://api.github.com/users/rafaelfranca/orgs",
        "repos_url": "https://api.github.com/users/rafaelfranca/repos",
        "events_url": "https://api.github.com/users/rafaelfranca/events{/privacy}",
        "received_events_url": "https://api.github.com/users/rafaelfranca/received_events",
        "type": "User",
        "site_admin": false
      },
      "open_issues": 10,
      "closed_issues": 18,
      "state": "open",
      "created_at": "2015-02-20T21:21:55Z",
      "updated_at": "2015-06-09T14:15:50Z",
      "due_on": null,
      "closed_at": null
    },
    "comments": 8,
    "created_at": "2015-06-09T11:42:03Z",
    "updated_at": "2015-06-10T10:53:13Z",
    "closed_at": null,
    "body": "ActiveSupport::Concern's class_methods uses const_defined? without a second argument and therefore also searches its ancestors for a ClassMethods module. This results in concerns included in a child class that add class methods to a parent class.\r\n\r\nCode example:\r\n```ruby\r\nrequire 'active_support/concern'\r\n\r\nmodule Foo\r\n  extend ActiveSupport::Concern\r\n\r\n  class_methods do\r\n    def foo\r\n\r\n    end\r\n  end\r\nend\r\n\r\nmodule Bar\r\n  extend ActiveSupport::Concern\r\n\r\n  class_methods do\r\n    def bar\r\n\r\n    end\r\n  end\r\nend\r\n\r\nclass Parent\r\n  include Bar\r\nend\r\n\r\nclass Child < Parent\r\n  include Foo\r\nend\r\n\r\nParent.respond_to? :foo # returns true\r\n```\r\n\r\nAm I right that this isn't the desired behaviour?"
  },
  {
    "url": "https://api.github.com/repos/rails/rails/issues/20485",
    "labels_url": "https://api.github.com/repos/rails/rails/issues/20485/labels{/name}",
    "comments_url": "https://api.github.com/repos/rails/rails/issues/20485/comments",
    "events_url": "https://api.github.com/repos/rails/rails/issues/20485/events",
    "html_url": "https://github.com/rails/rails/issues/20485",
    "id": 86366055,
    "number": 20485,
    "title": "deploy rollback after previous deploy failed caused asset_path to be in wrong format",
    "user": {
      "login": "drhenner",
      "id": 136110,
      "avatar_url": "https://avatars.githubusercontent.com/u/136110?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/drhenner",
      "html_url": "https://github.com/drhenner",
      "followers_url": "https://api.github.com/users/drhenner/followers",
      "following_url": "https://api.github.com/users/drhenner/following{/other_user}",
      "gists_url": "https://api.github.com/users/drhenner/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/drhenner/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/drhenner/subscriptions",
      "organizations_url": "https://api.github.com/users/drhenner/orgs",
      "repos_url": "https://api.github.com/users/drhenner/repos",
      "events_url": "https://api.github.com/users/drhenner/events{/privacy}",
      "received_events_url": "https://api.github.com/users/drhenner/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/rails/rails/labels/needs%20feedback",
        "name": "needs feedback",
        "color": "ededed"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 2,
    "created_at": "2015-06-08T23:11:58Z",
    "updated_at": "2015-06-09T15:18:25Z",
    "closed_at": null,
    "body": "I think I found a unicorn.\r\n\r\nSYSTEM\r\n\r\n```\r\n    gem 'rails', '4.0.13'\r\n    gem 'capistrano', '2.15.5'\r\n```\r\n\r\nSTEPS\r\n\r\n1 - I depoyed my app to production (no issues)\r\n2 - I deployed to production but the deploy failed (specifically after new assets were created)\r\n3 - Everything works great (the app stayed on the deploy in step 1)\r\n4 - I deployed to production with a bug in production\r\n5 - The deploy was SMALL so I did a `cap production deploy:rollback` (the rollback failed so we decided to live with the bug in production until the next day)\r\n6 - Everything except the small bug was in production (or so we thought)\r\n7 - 12 hours later some type of cache must have been busted.  (BANG asset_path method returned a path in the wrong format SEE BELOW )\r\n\r\n\r\nExpected: \r\n\r\n```\r\n    http://mycdnsubdomain.fictional-cdn.com/assets/smile-d0e099e021c95eb0de3615fd1d8c4d83.js\r\n```\r\n\r\nReceived\r\n\r\n```\r\n    http://mycdnsubdomain.fictional-cdn.com/assets/smile.js\r\n```\r\n\r\nI understand this is an edge case yet this did cause Major SITE DOWN issues.  I'm guessing this is specific to the rails version given the # of times the `asset_path` method has been refactored. \r\n\r\nI'll be glad to test in rails 4.1 if my company upgrades any time soon.  (the goal is in 2 months)"
  },
  {
    "url": "https://api.github.com/repos/rails/rails/issues/20482",
    "labels_url": "https://api.github.com/repos/rails/rails/issues/20482/labels{/name}",
    "comments_url": "https://api.github.com/repos/rails/rails/issues/20482/comments",
    "events_url": "https://api.github.com/repos/rails/rails/issues/20482/events",
    "html_url": "https://github.com/rails/rails/pull/20482",
    "id": 86343519,
    "number": 20482,
    "title": "Collection input propagates input's id to the label's for attribute.",
    "user": {
      "login": "nashby",
      "id": 200500,
      "avatar_url": "https://avatars.githubusercontent.com/u/200500?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nashby",
      "html_url": "https://github.com/nashby",
      "followers_url": "https://api.github.com/users/nashby/followers",
      "following_url": "https://api.github.com/users/nashby/following{/other_user}",
      "gists_url": "https://api.github.com/users/nashby/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nashby/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nashby/subscriptions",
      "organizations_url": "https://api.github.com/users/nashby/orgs",
      "repos_url": "https://api.github.com/users/nashby/repos",
      "events_url": "https://api.github.com/users/nashby/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nashby/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 0,
    "created_at": "2015-06-08T21:46:05Z",
    "updated_at": "2015-06-08T21:46:05Z",
    "closed_at": null,
    "pull_request": {
      "url": "https://api.github.com/repos/rails/rails/pulls/20482",
      "html_url": "https://github.com/rails/rails/pull/20482",
      "diff_url": "https://github.com/rails/rails/pull/20482.diff",
      "patch_url": "https://github.com/rails/rails/pull/20482.patch"
    },
    "body": "Fixes https://github.com/plataformatec/simple_form/issues/1263"
  },
  {
    "url": "https://api.github.com/repos/rails/rails/issues/20480",
    "labels_url": "https://api.github.com/repos/rails/rails/issues/20480/labels{/name}",
    "comments_url": "https://api.github.com/repos/rails/rails/issues/20480/comments",
    "events_url": "https://api.github.com/repos/rails/rails/issues/20480/events",
    "html_url": "https://github.com/rails/rails/pull/20480",
    "id": 86319074,
    "number": 20480,
    "title": "use our own runner for Rails framework components `bin/test`",
    "user": {
      "login": "senny",
      "id": 5402,
      "avatar_url": "https://avatars.githubusercontent.com/u/5402?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/senny",
      "html_url": "https://github.com/senny",
      "followers_url": "https://api.github.com/users/senny/followers",
      "following_url": "https://api.github.com/users/senny/following{/other_user}",
      "gists_url": "https://api.github.com/users/senny/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/senny/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/senny/subscriptions",
      "organizations_url": "https://api.github.com/users/senny/orgs",
      "repos_url": "https://api.github.com/users/senny/repos",
      "events_url": "https://api.github.com/users/senny/events{/privacy}",
      "received_events_url": "https://api.github.com/users/senny/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 5,
    "created_at": "2015-06-08T20:29:24Z",
    "updated_at": "2015-06-08T21:05:53Z",
    "closed_at": null,
    "pull_request": {
      "url": "https://api.github.com/repos/rails/rails/pulls/20480",
      "html_url": "https://github.com/rails/rails/pull/20480",
      "diff_url": "https://github.com/rails/rails/pull/20480.diff",
      "patch_url": "https://github.com/rails/rails/pull/20480.patch"
    },
    "body": "The minitest plugin for Rails 5 has some fantastic improvements. Would be nice to have it's features available in Rails itself.\r\n\r\nThis is a quick proof of concept to integrate the runner. The components Active Record, Railties and Active Job have been skipped for now because they rely on additional setup performed in the Rake tasks.\r\n\r\nInterested to hear your thoughts."
  },
  {
    "url": "https://api.github.com/repos/rails/rails/issues/20473",
    "labels_url": "https://api.github.com/repos/rails/rails/issues/20473/labels{/name}",
    "comments_url": "https://api.github.com/repos/rails/rails/issues/20473/comments",
    "events_url": "https://api.github.com/repos/rails/rails/issues/20473/events",
    "html_url": "https://github.com/rails/rails/issues/20473",
    "id": 86055943,
    "number": 20473,
    "title": "where doesn't warn for wrong values",
    "user": {
      "login": "vipulnsward",
      "id": 567626,
      "avatar_url": "https://avatars.githubusercontent.com/u/567626?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vipulnsward",
      "html_url": "https://github.com/vipulnsward",
      "followers_url": "https://api.github.com/users/vipulnsward/followers",
      "following_url": "https://api.github.com/users/vipulnsward/following{/other_user}",
      "gists_url": "https://api.github.com/users/vipulnsward/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vipulnsward/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vipulnsward/subscriptions",
      "organizations_url": "https://api.github.com/users/vipulnsward/orgs",
      "repos_url": "https://api.github.com/users/vipulnsward/repos",
      "events_url": "https://api.github.com/users/vipulnsward/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vipulnsward/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/rails/rails/labels/activerecord",
        "name": "activerecord",
        "color": "0b02e1"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 5,
    "created_at": "2015-06-08T07:01:32Z",
    "updated_at": "2015-06-09T14:55:10Z",
    "closed_at": null,
    "body": "Currently if we do `User.where(42)` etc. where doesn't warn on the value being passed. \r\nAccording to guides we support only conditions, arrays, hashes, strings. \r\nEverything else just gets converted to `(*somevalue*)` example -\r\n\r\n```ruby\r\nirb(main):001:0> User.where 42\r\n  User Load (0.5ms)  SELECT `users`.* FROM `users` WHERE (42)\r\n  => Loads all records\r\n```\r\nThis is ok for values apart from integers, (since they raise an error)\r\n```ruby\r\nirb(main):005:0> User.where(true)\r\nRuntimeError: unsupported: TrueClass\r\n```\r\nFor integers the query is executed silently. \r\n\r\nOpening here to get more feedback about this behaviour.\r\n"
  },
  {
    "url": "https://api.github.com/repos/rails/rails/issues/20468",
    "labels_url": "https://api.github.com/repos/rails/rails/issues/20468/labels{/name}",
    "comments_url": "https://api.github.com/repos/rails/rails/issues/20468/comments",
    "events_url": "https://api.github.com/repos/rails/rails/issues/20468/events",
    "html_url": "https://github.com/rails/rails/pull/20468",
    "id": 85921221,
    "number": 20468,
    "title": "Check structure command response for errors",
    "user": {
      "login": "tyre",
      "id": 1015847,
      "avatar_url": "https://avatars.githubusercontent.com/u/1015847?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tyre",
      "html_url": "https://github.com/tyre",
      "followers_url": "https://api.github.com/users/tyre/followers",
      "following_url": "https://api.github.com/users/tyre/following{/other_user}",
      "gists_url": "https://api.github.com/users/tyre/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tyre/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tyre/subscriptions",
      "organizations_url": "https://api.github.com/users/tyre/orgs",
      "repos_url": "https://api.github.com/users/tyre/repos",
      "events_url": "https://api.github.com/users/tyre/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tyre/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 0,
    "created_at": "2015-06-07T17:24:39Z",
    "updated_at": "2015-06-07T17:24:39Z",
    "closed_at": null,
    "pull_request": {
      "url": "https://api.github.com/repos/rails/rails/pulls/20468",
      "html_url": "https://github.com/rails/rails/pull/20468",
      "diff_url": "https://github.com/rails/rails/pull/20468.diff",
      "patch_url": "https://github.com/rails/rails/pull/20468.patch"
    },
    "body": "If `psql` is not installed on the system, `rake db:structure:load` gives no output, implying success.\r\nThis commit will raise sensible error messages in the case that `psql` does not exist or the process\r\nreturns an exit status other than 0."
  },
  {
    "url": "https://api.github.com/repos/rails/rails/issues/20459",
    "labels_url": "https://api.github.com/repos/rails/rails/issues/20459/labels{/name}",
    "comments_url": "https://api.github.com/repos/rails/rails/issues/20459/comments",
    "events_url": "https://api.github.com/repos/rails/rails/issues/20459/events",
    "html_url": "https://github.com/rails/rails/pull/20459",
    "id": 85824206,
    "number": 20459,
    "title": "Add missing postgresql types for migrations",
    "user": {
      "login": "meinac",
      "id": 1840945,
      "avatar_url": "https://avatars.githubusercontent.com/u/1840945?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meinac",
      "html_url": "https://github.com/meinac",
      "followers_url": "https://api.github.com/users/meinac/followers",
      "following_url": "https://api.github.com/users/meinac/following{/other_user}",
      "gists_url": "https://api.github.com/users/meinac/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meinac/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meinac/subscriptions",
      "organizations_url": "https://api.github.com/users/meinac/orgs",
      "repos_url": "https://api.github.com/users/meinac/repos",
      "events_url": "https://api.github.com/users/meinac/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meinac/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 2,
    "created_at": "2015-06-06T23:50:48Z",
    "updated_at": "2015-06-08T07:58:15Z",
    "closed_at": null,
    "pull_request": {
      "url": "https://api.github.com/repos/rails/rails/pulls/20459",
      "html_url": "https://github.com/rails/rails/pull/20459",
      "diff_url": "https://github.com/rails/rails/pull/20459.diff",
      "patch_url": "https://github.com/rails/rails/pull/20459.patch"
    },
    "body": "In one of my projects I'm using PostgreSQL geometric data types. I saw that there is some missing methods for migrations to create necessary data types for PostgreSQL. \r\nThese methods supported since PostgreSQL version 9.0, for more information please see the [link](http://www.postgresql.org/docs/9.0/static/datatype-geometric.html). \r\nI've created methods for these types."
  },
  {
    "url": "https://api.github.com/repos/rails/rails/issues/20457",
    "labels_url": "https://api.github.com/repos/rails/rails/issues/20457/labels{/name}",
    "comments_url": "https://api.github.com/repos/rails/rails/issues/20457/comments",
    "events_url": "https://api.github.com/repos/rails/rails/issues/20457/events",
    "html_url": "https://github.com/rails/rails/pull/20457",
    "id": 85787519,
    "number": 20457,
    "title": "Removed use of mocha in ActiveSupport except for caching_test",
    "user": {
      "login": "ronakjangir47",
      "id": 1909242,
      "avatar_url": "https://avatars.githubusercontent.com/u/1909242?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ronakjangir47",
      "html_url": "https://github.com/ronakjangir47",
      "followers_url": "https://api.github.com/users/ronakjangir47/followers",
      "following_url": "https://api.github.com/users/ronakjangir47/following{/other_user}",
      "gists_url": "https://api.github.com/users/ronakjangir47/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ronakjangir47/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ronakjangir47/subscriptions",
      "organizations_url": "https://api.github.com/users/ronakjangir47/orgs",
      "repos_url": "https://api.github.com/users/ronakjangir47/repos",
      "events_url": "https://api.github.com/users/ronakjangir47/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ronakjangir47/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 8,
    "created_at": "2015-06-06T17:57:29Z",
    "updated_at": "2015-06-08T14:22:39Z",
    "closed_at": null,
    "pull_request": {
      "url": "https://api.github.com/repos/rails/rails/pulls/20457",
      "html_url": "https://github.com/rails/rails/pull/20457",
      "diff_url": "https://github.com/rails/rails/pull/20457.diff",
      "patch_url": "https://github.com/rails/rails/pull/20457.patch"
    },
    "body": "caching_test.rb have some tweaks , I'm not sure how to handle them with minitest.\r\nAlso I replaced `never` expectation with \r\n```` ruby \r\nassert_equal \"expected call() => nil, got []\", assert_raises(MockExpectationError) { mock.verify }.message \r\n```` \r\nnot sure if it's the right way to do this"
  },
  {
    "url": "https://api.github.com/repos/rails/rails/issues/20453",
    "labels_url": "https://api.github.com/repos/rails/rails/issues/20453/labels{/name}",
    "comments_url": "https://api.github.com/repos/rails/rails/issues/20453/comments",
    "events_url": "https://api.github.com/repos/rails/rails/issues/20453/events",
    "html_url": "https://github.com/rails/rails/pull/20453",
    "id": 85628271,
    "number": 20453,
    "title": "ActiveRecord::Base#find(array) returning result in the same order as the array passed",
    "user": {
      "login": "miguelgraz",
      "id": 426507,
      "avatar_url": "https://avatars.githubusercontent.com/u/426507?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/miguelgraz",
      "html_url": "https://github.com/miguelgraz",
      "followers_url": "https://api.github.com/users/miguelgraz/followers",
      "following_url": "https://api.github.com/users/miguelgraz/following{/other_user}",
      "gists_url": "https://api.github.com/users/miguelgraz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/miguelgraz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/miguelgraz/subscriptions",
      "organizations_url": "https://api.github.com/users/miguelgraz/orgs",
      "repos_url": "https://api.github.com/users/miguelgraz/repos",
      "events_url": "https://api.github.com/users/miguelgraz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/miguelgraz/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 1,
    "created_at": "2015-06-05T20:41:07Z",
    "updated_at": "2015-06-05T20:52:40Z",
    "closed_at": null,
    "pull_request": {
      "url": "https://api.github.com/repos/rails/rails/pulls/20453",
      "html_url": "https://github.com/rails/rails/pull/20453",
      "diff_url": "https://github.com/rails/rails/pull/20453.diff",
      "patch_url": "https://github.com/rails/rails/pull/20453.patch"
    },
    "body": "This is an attempt to change the default order of `ActiveRecord::Base#find(array)` according to [this issue](https://github.com/rails/rails/issues/20338).\r\n\r\nHere's a list of concerns of the current implementation and a couple of doubts on how good it is right now and if there are other things to handle that aren't covered yet.\r\n\r\n- [x] it should return the same order as the parameter, regardless if it a list or array of integer or strings or slugs\r\n- [x] it should obey the `limit` clause\r\n- [x] it should allow any `order` clause take precedence, making it backward compatible\r\n- [ ] should it worry about (default|name)scope? How to test that?\r\n- [ ] is `ActiveRecord::Relation.values[:order]` a good way to know if this relation was already ordered?\r\n\r\nI'm really not sure if that's the best way to achieve this feature behavior and would love all feedbacks!\r\n\r\nThank you! :snowboarder: "
  },
  {
    "url": "https://api.github.com/repos/rails/rails/issues/20451",
    "labels_url": "https://api.github.com/repos/rails/rails/issues/20451/labels{/name}",
    "comments_url": "https://api.github.com/repos/rails/rails/issues/20451/comments",
    "events_url": "https://api.github.com/repos/rails/rails/issues/20451/events",
    "html_url": "https://github.com/rails/rails/issues/20451",
    "id": 85613845,
    "number": 20451,
    "title": "has_many association bug: accepts_nested_attributes_for or adding a scope on association breaks the associations before objects are saved",
    "user": {
      "login": "joevandyk",
      "id": 1179,
      "avatar_url": "https://avatars.githubusercontent.com/u/1179?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/joevandyk",
      "html_url": "https://github.com/joevandyk",
      "followers_url": "https://api.github.com/users/joevandyk/followers",
      "following_url": "https://api.github.com/users/joevandyk/following{/other_user}",
      "gists_url": "https://api.github.com/users/joevandyk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/joevandyk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/joevandyk/subscriptions",
      "organizations_url": "https://api.github.com/users/joevandyk/orgs",
      "repos_url": "https://api.github.com/users/joevandyk/repos",
      "events_url": "https://api.github.com/users/joevandyk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/joevandyk/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 0,
    "created_at": "2015-06-05T19:23:11Z",
    "updated_at": "2015-06-07T03:02:12Z",
    "closed_at": null,
    "body": "```ruby\r\nclass Developer\r\n  has_many :contracts \r\n  # Developer.new(contracts: [Contract.new]).contracts.first.developer \r\n  #   returns a Developer. Works as expected.\r\n\r\n  has_many :contracts\r\n  accepts_nested_attributes_for :contracts \r\n  # Developer.new(contracts: [Contract.new]).contracts.first.developer \r\n  #   returns nil.  Not expected. Only difference is the accepts_nested_attributes for.\r\n\r\n  has_many :contracts, -> { where(true) }\r\n  # Developer.new(contracts: [Contract.new]).contracts.first.developer \r\n  #   returns nil. Not expected. Only difference is the scope.\r\nend\r\n```\r\n\r\nhttps://github.com/joevandyk/rails/commit/c2a21922c12695a7b10b91c6161bf8f2464c99ea contains the failing test (should I do this via a pull request?)\r\n\r\nOn Rails 4-2-stable:\r\n\r\n```\r\n$ ruby -Itest test/cases/associations/has_many_associations_test.rb\r\nUsing sqlite3\r\nRun options: --seed 24707\r\n\r\n# Running:\r\n\r\n............................FF.....................................................................................................................................................................................................\r\n\r\nFinished in 1.585897s, 143.1367 runs/s, 332.3041 assertions/s.\r\n\r\n  1) Failure:\r\nHasManyAssociationsTest#test_broke_1 [test/cases/associations/has_many_associations_test.rb:162]:\r\n--- expected\r\n+++ actual\r\n@@ -1 +1 @@\r\n-nil\r\n+#<Developer id: nil, name: nil, salary: 70000, created_at: nil, updated_at: nil, created_on: nil, updated_on: nil>\r\n\r\n\r\n\r\n  2) Failure:\r\nHasManyAssociationsTest#test_broke_2 [test/cases/associations/has_many_associations_test.rb:168]:\r\n--- expected\r\n+++ actual\r\n@@ -1 +1 @@\r\n-nil\r\n+#<Developer id: nil, name: nil, salary: 70000, created_at: nil, updated_at: nil, created_on: nil, updated_on: nil>\r\n\r\n\r\n227 runs, 527 assertions, 2 failures, 0 errors, 0 skips\r\n```"
  },
  {
    "url": "https://api.github.com/repos/rails/rails/issues/20450",
    "labels_url": "https://api.github.com/repos/rails/rails/issues/20450/labels{/name}",
    "comments_url": "https://api.github.com/repos/rails/rails/issues/20450/comments",
    "events_url": "https://api.github.com/repos/rails/rails/issues/20450/events",
    "html_url": "https://github.com/rails/rails/pull/20450",
    "id": 85570889,
    "number": 20450,
    "title": "Guard against finder options or invalid-type column names in Relation#count",
    "user": {
      "login": "rousisk",
      "id": 1429943,
      "avatar_url": "https://avatars.githubusercontent.com/u/1429943?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rousisk",
      "html_url": "https://github.com/rousisk",
      "followers_url": "https://api.github.com/users/rousisk/followers",
      "following_url": "https://api.github.com/users/rousisk/following{/other_user}",
      "gists_url": "https://api.github.com/users/rousisk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rousisk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rousisk/subscriptions",
      "organizations_url": "https://api.github.com/users/rousisk/orgs",
      "repos_url": "https://api.github.com/users/rousisk/repos",
      "events_url": "https://api.github.com/users/rousisk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rousisk/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 4,
    "created_at": "2015-06-05T16:15:42Z",
    "updated_at": "2015-06-08T08:15:28Z",
    "closed_at": null,
    "pull_request": {
      "url": "https://api.github.com/repos/rails/rails/pulls/20450",
      "html_url": "https://github.com/rails/rails/pull/20450",
      "diff_url": "https://github.com/rails/rails/pull/20450.diff",
      "patch_url": "https://github.com/rails/rails/pull/20450.patch"
    },
    "body": "This is what I came up with regarding #20434 . Keep in mind that the current implementation of `count` in 4.1 and 4.2 has two related but distinct issues:\r\n\r\n1. When both a column name and an options hash are provided, the options are silently ignored.\r\n2. When a Hash (with finder options or otherwise) is provided as the sole argument, it is silently ignored and a `count(:all)` is performed.\r\n\r\nI introduced an explicit check for the first case, raising an `ArgumentError` whenever an options hash is specified. When the `activerecord-deprecated_finders` gem is present we can safely let that handle the finder options.\r\n\r\nI handle the second issue by passing the argument to the DB directly and letting that to eventually raise an error. This is consistent with the approach taken in the current `master` when provided with an invalid type for a column name. \r\n\r\n### Providing both a column name and an options hash\r\n\r\nThese are the results of running `User.count(:id, conditions: { username: 'rousis' })`:\r\n\r\n4-1-stable and 4-2-stable | 4-1 and 4-2 with deprecated_finders | master | 4-2-stable with thtis PR\r\n----------| ---------- | ---------- |----------\r\nSELECT COUNT(\"users\".\"id\") FROM \"users\" | SELECT COUNT(\"users\".\"id\") FROM \"users\" WHERE \"users\".\"username\" = $1  [[\"username\", \"rousis\"]] (plus deprecation warning) | ArgumentError: wrong number of arguments (2 for 0..1) | ArgumentError: Relation#count does not support finder options anymore. Please build a scope and then call count on it or use the activerecord-deprecated_finders gem to enable this functionality.\r\n\r\n\r\n\r\n### Providing a single hash argument\r\n\r\nAnd these are the results of running `User.count({ username: 'rousis' })`:\r\n\r\n4-1-stable and 4-2-stable | 4-1 and 4-2 with deprecated_finders | master | 4-2-stable with thtis PR\r\n----------| ---------- | ---------- |----------\r\nSELECT COUNT(*) FROM \"users\" | SELECT COUNT(*) FROM \"users\" WHERE \"users\".\"username\" = 'rousis' (plus deprecation warning) | ActiveRecord:: StatementInvalid | ActiveRecord:: StatementInvalid\r\n\r\n\r\nThis PR targets `4-2-stable` but it might be a useful addition to `4-1-stable` as well.\r\n\r\nAny feedback on the concept or the implementation would be greatly appreciated."
  },
  {
    "url": "https://api.github.com/repos/rails/rails/issues/20449",
    "labels_url": "https://api.github.com/repos/rails/rails/issues/20449/labels{/name}",
    "comments_url": "https://api.github.com/repos/rails/rails/issues/20449/comments",
    "events_url": "https://api.github.com/repos/rails/rails/issues/20449/events",
    "html_url": "https://github.com/rails/rails/issues/20449",
    "id": 85560101,
    "number": 20449,
    "title": "AbsenceValidator should check if associated records are marked_for_destruction?",
    "user": {
      "login": "thomasfedb",
      "id": 193831,
      "avatar_url": "https://avatars.githubusercontent.com/u/193831?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/thomasfedb",
      "html_url": "https://github.com/thomasfedb",
      "followers_url": "https://api.github.com/users/thomasfedb/followers",
      "following_url": "https://api.github.com/users/thomasfedb/following{/other_user}",
      "gists_url": "https://api.github.com/users/thomasfedb/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/thomasfedb/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/thomasfedb/subscriptions",
      "organizations_url": "https://api.github.com/users/thomasfedb/orgs",
      "repos_url": "https://api.github.com/users/thomasfedb/repos",
      "events_url": "https://api.github.com/users/thomasfedb/events{/privacy}",
      "received_events_url": "https://api.github.com/users/thomasfedb/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 0,
    "created_at": "2015-06-05T15:33:20Z",
    "updated_at": "2015-06-05T15:33:20Z",
    "closed_at": null,
    "body": "Currently `AbsenceValidator` simply checks if attributes are `present?`:\r\n\r\n```ruby\r\nclass AbsenceValidator < EachValidator\r\n  def validate_each(record, attr_name, value)\r\n    record.errors.add(attr_name, :present, options) if value.present?\r\n  end\r\nend\r\n```\r\n\r\nHowever this can be problematic when using `mark_for_destruction` from `AutosaveAssociation`, which is used by the `:allow_destroy` option of `accepts_nested_attributes_for`. It's enabled for the association if not already enabled:\r\n\r\n```ruby\r\ndef accepts_nested_attributes_for(*attr_names)\r\n  # ...\r\n\r\n  attr_names.each do |association_name|\r\n    if reflection = _reflect_on_association(association_name)\r\n      reflection.autosave = true\r\n      \r\n      # ...\r\n    end\r\n  end\r\nend\r\n```\r\n\r\nFor example, with the following models:\r\n\r\n```ruby\r\nclass Person < ActiveRecord::Base\r\n  # has_pets:boolean\r\n\r\n  has_many :pets\r\n  accepts_nested_attributes_for :pets, allow_destroy: true\r\n\r\n  validates :pets, absence: {unless: :has_pets?}\r\nend\r\n\r\nclass Pet  < ActiveRecord::Base\r\n  # name:string\r\nend\r\n```\r\n\r\nIf we first create a person with a pet:\r\n\r\n```ruby\r\nperson = Person.create(has_pets: true, pets_attributes: [{name: \"Teddy\"}]\r\n```\r\n\r\nThen we find that we're unable to unset `:has_pets` and destroy Teddy using the `:_destroy` attribute. We would expect the following to work:\r\n\r\n```ruby\r\nperson.update_attributes(has_pets: false, pets_attributes: [{id: 1, _destroy: true}])\r\n```\r\n\r\nHowever it will fail with a validation error, as during validation the associated `Pet` is still present, although it has been `marked_for_destruction?`.\r\n\r\nA validator that handles this particular case looks something like this:\r\n\r\n```ruby\r\ndef validate_pets\r\n  unless pets.select {|p| !p.marked_for_destruction? }.empty?\r\n    errors.add(:pets, \"must be empty\")\r\n  end\r\nend\r\n```\r\n\r\nWe should update `AbsenceValidator` to exhibit this same behaviour when handling associations with `autosave: true`."
  },
  {
    "url": "https://api.github.com/repos/rails/rails/issues/20447",
    "labels_url": "https://api.github.com/repos/rails/rails/issues/20447/labels{/name}",
    "comments_url": "https://api.github.com/repos/rails/rails/issues/20447/comments",
    "events_url": "https://api.github.com/repos/rails/rails/issues/20447/events",
    "html_url": "https://github.com/rails/rails/issues/20447",
    "id": 85551519,
    "number": 20447,
    "title": "duration instrumenter fails with TypeError can't convert nil into an exact number",
    "user": {
      "login": "frobichaud",
      "id": 3533748,
      "avatar_url": "https://avatars.githubusercontent.com/u/3533748?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frobichaud",
      "html_url": "https://github.com/frobichaud",
      "followers_url": "https://api.github.com/users/frobichaud/followers",
      "following_url": "https://api.github.com/users/frobichaud/following{/other_user}",
      "gists_url": "https://api.github.com/users/frobichaud/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frobichaud/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frobichaud/subscriptions",
      "organizations_url": "https://api.github.com/users/frobichaud/orgs",
      "repos_url": "https://api.github.com/users/frobichaud/repos",
      "events_url": "https://api.github.com/users/frobichaud/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frobichaud/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 0,
    "created_at": "2015-06-05T14:52:36Z",
    "updated_at": "2015-06-05T14:52:36Z",
    "closed_at": null,
    "body": "We have the following Rack middleware that computes the total active_record duration for a request:\r\n```\r\nActiveSupport::Notifications.subscribe('sql.active_record') do |*args|\r\n  event = ActiveSupport::Notifications::Event.new(*args)\r\n  env[:db_duration] += event.duration\r\nend if defined?(ActiveRecord)\r\n```\r\n\r\nWe randomly have the following error:\r\n```\r\nTypeError can't convert nil into an exact number\r\n```\r\nin \r\n```\r\ngems/activesupport-4.2.1/lib/active_support/core_ext/time/calculations.rb:226\r\n```\r\n\r\n```\r\n226:      minus_without_duration(other)\r\n227:    end\r\n228:  end\r\n229:  alias_method :minus_without_duration, :-\r\n```\r\nIt looks like the parameter other is nil"
  },
  {
    "url": "https://api.github.com/repos/rails/rails/issues/20446",
    "labels_url": "https://api.github.com/repos/rails/rails/issues/20446/labels{/name}",
    "comments_url": "https://api.github.com/repos/rails/rails/issues/20446/comments",
    "events_url": "https://api.github.com/repos/rails/rails/issues/20446/events",
    "html_url": "https://github.com/rails/rails/issues/20446",
    "id": 85549075,
    "number": 20446,
    "title": "Using scaffold generator with namespace lets Controller use undefined privat method for whitelist strong parameters ",
    "user": {
      "login": "ryabrody",
      "id": 954367,
      "avatar_url": "https://avatars.githubusercontent.com/u/954367?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryabrody",
      "html_url": "https://github.com/ryabrody",
      "followers_url": "https://api.github.com/users/ryabrody/followers",
      "following_url": "https://api.github.com/users/ryabrody/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryabrody/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryabrody/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryabrody/subscriptions",
      "organizations_url": "https://api.github.com/users/ryabrody/orgs",
      "repos_url": "https://api.github.com/users/ryabrody/repos",
      "events_url": "https://api.github.com/users/ryabrody/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryabrody/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 0,
    "created_at": "2015-06-05T14:43:23Z",
    "updated_at": "2015-06-05T14:43:23Z",
    "closed_at": null,
    "body": "With Rails 4.1.0, if I use `rails generate scaffold admin/categories name:string --no-assets` my `Admin::CategoriesController` uses the privat method `category_params` instead of `admin_category_params` (namespace is missing) as parameter for updating a resource.\r\n\r\nSee generated code with wrong parameter fat highlighted:\r\n\r\n<pre>\r\nclass Admin::CategoriesController < ApplicationController\r\n  before_action :set_admin_category, only: [:show, :edit, :update, :destroy]\r\n\r\n  respond_to :html\r\n\r\n  def index\r\n    @admin_categories = Admin::Category.all\r\n    respond_with(@admin_categories)\r\n  end\r\n\r\n  def show\r\n    respond_with(@admin_category)\r\n  end\r\n\r\n  def new\r\n    @admin_category = Admin::Category.new\r\n    respond_with(@admin_category)\r\n  end\r\n\r\n  def edit\r\n  end\r\n\r\n  def create\r\n    @admin_category = Admin::Category.new(<b>category_params</b>)\r\n    flash[:notice] = 'Admin::Category was successfully created.' if @admin_category.save\r\n    respond_with(@admin_category)\r\n  end\r\n\r\n  def update\r\n    flash[:notice] = 'Admin::Category was successfully updated.' if @admin_category.update(<b>category_params</b>)\r\n    respond_with(@admin_category)\r\n  end\r\n\r\n  def destroy\r\n    @admin_category.destroy\r\n    respond_with(@admin_category)\r\n  end\r\n\r\n  private\r\n    def set_admin_category\r\n      @admin_category = Admin::Category.find(params[:id])\r\n    end\r\n\r\n    def <b>admin_</b>category_params\r\n      params.require(:admin_category).permit(:name)\r\n    end\r\nend\r\n</pre>\r\n\r\nThis causes following Error when updating a resource:\r\n```\r\nundefined local variable or method `category_params' for #<Admin::CategoriesController:0x007f81d7832330>\r\n```\r\nUpdating the record with following changes works. Changes are also highlighted fat:\r\n\r\n<pre>\r\nclass Admin::CategoriesController < ApplicationController\r\n  before_action :set_admin_category, only: [:show, :edit, :update, :destroy]\r\n\r\n  respond_to :html\r\n\r\n  def index\r\n    @admin_categories = Admin::Category.all\r\n    respond_with(@admin_categories)\r\n  end\r\n\r\n  def show\r\n    respond_with(@admin_category)\r\n  end\r\n\r\n  def new\r\n    @admin_category = Admin::Category.new\r\n    respond_with(@admin_category)\r\n  end\r\n\r\n  def edit\r\n  end\r\n\r\n  def create\r\n    @admin_category = Admin::Category.new(<b>admin_</b>category_params)\r\n    flash[:notice] = 'Admin::Category was successfully created.' if @admin_category.save\r\n    respond_with(@admin_category)\r\n  end\r\n\r\n  def update\r\n    flash[:notice] = 'Admin::Category was successfully updated.' if @admin_category.update(<b>admin_</b>category_params)\r\n    respond_with(@admin_category)\r\n  end\r\n\r\n  def destroy\r\n    @admin_category.destroy\r\n    respond_with(@admin_category)\r\n  end\r\n\r\n  private\r\n    def set_admin_category\r\n      @admin_category = Admin::Category.find(params[:id])\r\n    end\r\n\r\n    def admin_category_params\r\n      params.require(:admin_category).permit(:name)\r\n    end\r\nend\r\n</pre>\r\n\r\n\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/rails/rails/issues/20440",
    "labels_url": "https://api.github.com/repos/rails/rails/issues/20440/labels{/name}",
    "comments_url": "https://api.github.com/repos/rails/rails/issues/20440/comments",
    "events_url": "https://api.github.com/repos/rails/rails/issues/20440/events",
    "html_url": "https://github.com/rails/rails/pull/20440",
    "id": 85304065,
    "number": 20440,
    "title": "Fix the message verifier encoding issue",
    "user": {
      "login": "repinel",
      "id": 1685896,
      "avatar_url": "https://avatars.githubusercontent.com/u/1685896?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/repinel",
      "html_url": "https://github.com/repinel",
      "followers_url": "https://api.github.com/users/repinel/followers",
      "following_url": "https://api.github.com/users/repinel/following{/other_user}",
      "gists_url": "https://api.github.com/users/repinel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/repinel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/repinel/subscriptions",
      "organizations_url": "https://api.github.com/users/repinel/orgs",
      "repos_url": "https://api.github.com/users/repinel/repos",
      "events_url": "https://api.github.com/users/repinel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/repinel/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 0,
    "created_at": "2015-06-04T22:23:18Z",
    "updated_at": "2015-06-04T22:23:18Z",
    "closed_at": null,
    "pull_request": {
      "url": "https://api.github.com/repos/rails/rails/pulls/20440",
      "html_url": "https://github.com/rails/rails/pull/20440",
      "diff_url": "https://github.com/rails/rails/pull/20440.diff",
      "patch_url": "https://github.com/rails/rails/pull/20440.patch"
    },
    "body": "Fixes #20416 \r\n\r\n```ruby\r\nverifier = ActiveSupport::MessageVerifier.new('secret')\r\nverifier.verify(\"\\xff\") # => ArgumentError: invalid byte sequence in UTF-8\r\n```\r\n"
  },
  {
    "url": "https://api.github.com/repos/rails/rails/issues/20434",
    "labels_url": "https://api.github.com/repos/rails/rails/issues/20434/labels{/name}",
    "comments_url": "https://api.github.com/repos/rails/rails/issues/20434/comments",
    "events_url": "https://api.github.com/repos/rails/rails/issues/20434/events",
    "html_url": "https://github.com/rails/rails/issues/20434",
    "id": 84972219,
    "number": 20434,
    "title": "ActiveRecord::Calculations#count surprising results with conditions",
    "user": {
      "login": "rousisk",
      "id": 1429943,
      "avatar_url": "https://avatars.githubusercontent.com/u/1429943?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rousisk",
      "html_url": "https://github.com/rousisk",
      "followers_url": "https://api.github.com/users/rousisk/followers",
      "following_url": "https://api.github.com/users/rousisk/following{/other_user}",
      "gists_url": "https://api.github.com/users/rousisk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rousisk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rousisk/subscriptions",
      "organizations_url": "https://api.github.com/users/rousisk/orgs",
      "repos_url": "https://api.github.com/users/rousisk/repos",
      "events_url": "https://api.github.com/users/rousisk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rousisk/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/rails/rails/labels/activerecord",
        "name": "activerecord",
        "color": "0b02e1"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 9,
    "created_at": "2015-06-04T08:02:16Z",
    "updated_at": "2015-06-05T13:52:04Z",
    "closed_at": null,
    "body": "Hello everyone,\r\n\r\nCould you please share your thoughts on the following behaviour?\r\n\r\nRails 4.0.13\r\n\r\n    User.count(conditions: { username: 'rousis' }) \r\n      SELECT COUNT(*) FROM \"users\" WHERE \"users\".\"username = 'rousis' )\r\n    => 1\r\n\r\nRails 4.1.10\r\n\r\n    User.count(conditions: { username: 'rousis' }) \r\n      SELECT COUNT(*) FROM \"users\"\r\n    => 0\r\n\r\nRails 4.2.1\r\n\r\n    User.count(conditions: { username: 'rousis' }) \r\n      SELECT COUNT(*) FROM \"users\"\r\n    => 0\r\n\r\n\r\nI know that these type of finders have been deprecated. \r\n\r\nNonetheless, while updating a project, I didn't see any deprecation for `count` (in 4.0.x), and in the next version the code \"failed\" silently (by not applying any conditions). The conditions are completely ignored (you can even specify non-existent columns without an error).\r\n\r\nIf you can think of any way to handle that more gracefully I would be happy to prepare a PR.\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/rails/rails/issues/20426",
    "labels_url": "https://api.github.com/repos/rails/rails/issues/20426/labels{/name}",
    "comments_url": "https://api.github.com/repos/rails/rails/issues/20426/comments",
    "events_url": "https://api.github.com/repos/rails/rails/issues/20426/events",
    "html_url": "https://github.com/rails/rails/issues/20426",
    "id": 84739915,
    "number": 20426,
    "title": "undefined method `uncached' on empty polymorphic belongs_to with force_reload",
    "user": {
      "login": "kpricorn",
      "id": 81160,
      "avatar_url": "https://avatars.githubusercontent.com/u/81160?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kpricorn",
      "html_url": "https://github.com/kpricorn",
      "followers_url": "https://api.github.com/users/kpricorn/followers",
      "following_url": "https://api.github.com/users/kpricorn/following{/other_user}",
      "gists_url": "https://api.github.com/users/kpricorn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kpricorn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kpricorn/subscriptions",
      "organizations_url": "https://api.github.com/users/kpricorn/orgs",
      "repos_url": "https://api.github.com/users/kpricorn/repos",
      "events_url": "https://api.github.com/users/kpricorn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kpricorn/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/rails/rails/labels/activerecord",
        "name": "activerecord",
        "color": "0b02e1"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 0,
    "created_at": "2015-06-03T19:41:54Z",
    "updated_at": "2015-06-05T13:41:33Z",
    "closed_at": null,
    "body": "when calling the association method with `force_reload: true` on a uninitialized belongs_to association a `NoMethodError` is raised in `singular_association.rb:7` [1]\r\n\r\nOther than a comment on an old issue refering to this line (#2386) I couldn't find anything useful on this issue. The error could be reproduced with Rails v4.1.10, v4.2.0 and master.\r\n\r\nAny thoughts?\r\n\r\n[1] Test case\r\n```\r\nunless File.exist?('Gemfile')\r\n  File.write('Gemfile', <<-GEMFILE)\r\n    source 'https://rubygems.org'\r\n    gem 'rails', github: 'rails/rails'\r\n    gem 'arel', github: 'rails/arel'\r\n    gem 'sqlite3'\r\n  GEMFILE\r\n\r\n  system 'bundle'\r\nend\r\n\r\nrequire 'bundler'\r\nBundler.setup(:default)\r\n\r\nrequire 'active_record'\r\nrequire 'minitest/autorun'\r\nrequire 'logger'\r\n\r\n# This connection will do for database-independent bug reports.\r\nActiveRecord::Base.establish_connection(adapter: 'sqlite3', database: ':memory:')\r\nActiveRecord::Base.logger = Logger.new(STDOUT)\r\n\r\nActiveRecord::Schema.define do\r\n  create_table :posts, force: true  do |t|\r\n  end\r\n\r\n  create_table :comments, force: true  do |t|\r\n    t.references :commentable, polymorphic: true, index: true\r\n  end\r\nend\r\n\r\nclass Post < ActiveRecord::Base\r\n  has_one :comment, as: :commentable\r\nend\r\n\r\nclass Comment < ActiveRecord::Base\r\n  belongs_to :commentable, polymorphic: true\r\nend\r\n\r\nclass BugTest < Minitest::Test\r\n  def test_belongs_to_force_reload_nil\r\n    assert_equal Comment.new.commentable(force_reload: true), nil\r\n  end\r\nend\r\n```\r\n\r\n[2] output\r\n```\r\nbakki :: devel/rails > ruby has_one_force_reload_nil_test.rb                                                                                                              1\r\n-- create_table(:posts, {:force=>true})\r\nD, [2015-06-03T21:20:08.012423 #32623] DEBUG -- :    (0.3ms)  CREATE TABLE \"posts\" (\"id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL)\r\n   -> 0.0082s\r\n-- create_table(:comments, {:force=>true})\r\nD, [2015-06-03T21:20:08.013247 #32623] DEBUG -- :    (0.1ms)  CREATE TABLE \"comments\" (\"id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, \"commentable_type\" varchar, \"commentable_id\" integer)\r\nD, [2015-06-03T21:20:08.036462 #32623] DEBUG -- :    (0.1ms)  select sqlite_version(*)\r\nD, [2015-06-03T21:20:08.036967 #32623] DEBUG -- :    (0.1ms)  CREATE  INDEX \"index_comments_on_commentable_type_and_commentable_id\" ON \"comments\" (\"commentable_type\", \"commentable_id\")\r\n   -> 0.0244s\r\nRun options: --seed 39301\r\n\r\n# Running:\r\n\r\nE\r\n\r\nFinished in 0.009509s, 105.1660 runs/s, 0.0000 assertions/s.\r\n\r\n  1) Error:\r\nBugTest#test_has_one_force_reload_nil:\r\nNoMethodError: undefined method `uncached' for nil:NilClass\r\n    /Users/sdecaste/.rbenv/versions/2.2.2/lib/ruby/gems/2.2.0/bundler/gems/rails-ae5f2b4e79f3/activerecord/lib/active_record/associations/singular_association.rb:7:in `reader'\r\n    /Users/sdecaste/.rbenv/versions/2.2.2/lib/ruby/gems/2.2.0/bundler/gems/rails-ae5f2b4e79f3/activerecord/lib/active_record/associations/builder/association.rb:111:in `commentable'\r\n    has_one_force_reload_nil_test.rb:42:in `test_has_one_force_reload_nil'\r\n\r\n1 runs, 0 assertions, 0 failures, 1 errors, 0 skips\r\n```"
  },
  {
    "url": "https://api.github.com/repos/rails/rails/issues/20425",
    "labels_url": "https://api.github.com/repos/rails/rails/issues/20425/labels{/name}",
    "comments_url": "https://api.github.com/repos/rails/rails/issues/20425/comments",
    "events_url": "https://api.github.com/repos/rails/rails/issues/20425/events",
    "html_url": "https://github.com/rails/rails/pull/20425",
    "id": 84609195,
    "number": 20425,
    "title": "Trying to backport #18228 to 4-2-stable",
    "user": {
      "login": "joallard",
      "id": 949482,
      "avatar_url": "https://avatars.githubusercontent.com/u/949482?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/joallard",
      "html_url": "https://github.com/joallard",
      "followers_url": "https://api.github.com/users/joallard/followers",
      "following_url": "https://api.github.com/users/joallard/following{/other_user}",
      "gists_url": "https://api.github.com/users/joallard/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/joallard/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/joallard/subscriptions",
      "organizations_url": "https://api.github.com/users/joallard/orgs",
      "repos_url": "https://api.github.com/users/joallard/repos",
      "events_url": "https://api.github.com/users/joallard/events{/privacy}",
      "received_events_url": "https://api.github.com/users/joallard/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 0,
    "created_at": "2015-06-03T15:00:08Z",
    "updated_at": "2015-06-03T15:29:52Z",
    "closed_at": null,
    "pull_request": {
      "url": "https://api.github.com/repos/rails/rails/pulls/20425",
      "html_url": "https://github.com/rails/rails/pull/20425",
      "diff_url": "https://github.com/rails/rails/pull/20425.diff",
      "patch_url": "https://github.com/rails/rails/pull/20425.patch"
    },
    "body": "I couldn't get a Travis run on my repo, so here. #18228\r\n\r\nie Is it possible to backport 18228 to 4-2?"
  },
  {
    "url": "https://api.github.com/repos/rails/rails/issues/20424",
    "labels_url": "https://api.github.com/repos/rails/rails/issues/20424/labels{/name}",
    "comments_url": "https://api.github.com/repos/rails/rails/issues/20424/comments",
    "events_url": "https://api.github.com/repos/rails/rails/issues/20424/events",
    "html_url": "https://github.com/rails/rails/issues/20424",
    "id": 84593473,
    "number": 20424,
    "title": "Count on has_many association generating invalid SQL under rails 4.2.1",
    "user": {
      "login": "nagyt234",
      "id": 1257088,
      "avatar_url": "https://avatars.githubusercontent.com/u/1257088?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nagyt234",
      "html_url": "https://github.com/nagyt234",
      "followers_url": "https://api.github.com/users/nagyt234/followers",
      "following_url": "https://api.github.com/users/nagyt234/following{/other_user}",
      "gists_url": "https://api.github.com/users/nagyt234/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nagyt234/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nagyt234/subscriptions",
      "organizations_url": "https://api.github.com/users/nagyt234/orgs",
      "repos_url": "https://api.github.com/users/nagyt234/repos",
      "events_url": "https://api.github.com/users/nagyt234/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nagyt234/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 2,
    "created_at": "2015-06-03T14:28:18Z",
    "updated_at": "2015-06-10T11:04:51Z",
    "closed_at": null,
    "body": "I have simple modesl:\r\n```\r\nclass StatusList < ActiveRecord::Base\r\n  ...\r\n  has_many :status_values, inverse_of: :status_list, dependent: :restrict_with_exception\r\n  ...\r\nend\r\n\r\nclass StatusValue < ActiveRecord::Base\r\n  ...\r\n  belongs_to :status_list, inverse_of: :status_values\r\n  ...\r\nend\r\n```\r\nIf I use the following code:\r\n```\r\nStatusList.first.status_values.count\r\n```\r\nI get the following error:\r\n```\r\nActiveRecord::StatementInvalid: Mysql2::Error: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '*) FROM `status_values` INNER JOIN `status_lists` ON `status_lists`.`id` = `stat' at line 1: SELECT COUNT(status_values.*) FROM `status_values` INNER JOIN `status_lists` ON `status_lists`.`id` = `status_values`.`status_list_id` WHERE `status_values`.`status_list_id` = 1\r\n        from /usr/local/rvm/gems/ruby-2.2.2/gems/activerecord-4.2.1/lib/active_record/connection_adapters/abstract_mysql_adapter.rb:299:in `query'\r\n```\r\nI.e. wrong SQL is generated, `COUNT(status_values.*)` instead of `COUNT(*)`."
  },
  {
    "url": "https://api.github.com/repos/rails/rails/issues/20420",
    "labels_url": "https://api.github.com/repos/rails/rails/issues/20420/labels{/name}",
    "comments_url": "https://api.github.com/repos/rails/rails/issues/20420/comments",
    "events_url": "https://api.github.com/repos/rails/rails/issues/20420/events",
    "html_url": "https://github.com/rails/rails/pull/20420",
    "id": 84263902,
    "number": 20420,
    "title": "Add grep option '-g' for rake routes task",
    "user": {
      "login": "davydovanton",
      "id": 1147484,
      "avatar_url": "https://avatars.githubusercontent.com/u/1147484?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/davydovanton",
      "html_url": "https://github.com/davydovanton",
      "followers_url": "https://api.github.com/users/davydovanton/followers",
      "following_url": "https://api.github.com/users/davydovanton/following{/other_user}",
      "gists_url": "https://api.github.com/users/davydovanton/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/davydovanton/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/davydovanton/subscriptions",
      "organizations_url": "https://api.github.com/users/davydovanton/orgs",
      "repos_url": "https://api.github.com/users/davydovanton/repos",
      "events_url": "https://api.github.com/users/davydovanton/events{/privacy}",
      "received_events_url": "https://api.github.com/users/davydovanton/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/rails/rails/labels/actionpack",
        "name": "actionpack",
        "color": "FFF700"
      },
      {
        "url": "https://api.github.com/repos/rails/rails/labels/railties",
        "name": "railties",
        "color": "8BE06E"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 9,
    "created_at": "2015-06-02T23:37:40Z",
    "updated_at": "2015-06-09T20:22:11Z",
    "closed_at": null,
    "pull_request": {
      "url": "https://api.github.com/repos/rails/rails/pulls/20420",
      "html_url": "https://github.com/rails/rails/pull/20420",
      "diff_url": "https://github.com/rails/rails/pull/20420.diff",
      "patch_url": "https://github.com/rails/rails/pull/20420.patch"
    },
    "body": "It's simple realization for #18902. \r\nThis option returns the url `name`, `verb`, `path` and `reqs` field that match the pattern.\r\n\r\nFor this I use `OptionParser` from ruby standart lib. I do not like to use `--` symbol, but it's necessary for rake. Also I have a question: May be we replace `CONTROLLER` option to key option too?\r\n"
  },
  {
    "url": "https://api.github.com/repos/rails/rails/issues/20419",
    "labels_url": "https://api.github.com/repos/rails/rails/issues/20419/labels{/name}",
    "comments_url": "https://api.github.com/repos/rails/rails/issues/20419/comments",
    "events_url": "https://api.github.com/repos/rails/rails/issues/20419/events",
    "html_url": "https://github.com/rails/rails/issues/20419",
    "id": 84214467,
    "number": 20419,
    "title": "Inconsistency between transaction rollbacks when an active record model has no has many relationships and when it has one",
    "user": {
      "login": "pivotal-tabernash",
      "id": 898457,
      "avatar_url": "https://avatars.githubusercontent.com/u/898457?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pivotal-tabernash",
      "html_url": "https://github.com/pivotal-tabernash",
      "followers_url": "https://api.github.com/users/pivotal-tabernash/followers",
      "following_url": "https://api.github.com/users/pivotal-tabernash/following{/other_user}",
      "gists_url": "https://api.github.com/users/pivotal-tabernash/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pivotal-tabernash/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pivotal-tabernash/subscriptions",
      "organizations_url": "https://api.github.com/users/pivotal-tabernash/orgs",
      "repos_url": "https://api.github.com/users/pivotal-tabernash/repos",
      "events_url": "https://api.github.com/users/pivotal-tabernash/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pivotal-tabernash/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 0,
    "created_at": "2015-06-02T21:14:35Z",
    "updated_at": "2015-06-02T21:14:35Z",
    "closed_at": null,
    "body": "A simple rails app demonstrating this issue can be found here https://github.com/pivotal-tabernash/rails_4_transaction_issue\r\n\r\nThere is an inconsistency between transaction rollbacks when an active record model has no has many relationships and when it has one. \r\n\r\n\r\nIn the former case, if a record is created and then rolled back the instance will have an id set. \r\nIn the latter case, if a record is created and then rolled back the instance will NOT have an id set. It will be nil.\r\n\r\nThis repo's first two commits demonstrate the issue. To reproduce, checkout the first commit (53cc48f) and then in the console do the following:\r\n\r\n```\r\nbob = nil\r\nActiveRecord::Base.transaction { bob = Bob.create; p bob.id; raise}\r\nbob\r\n```\r\n\r\nYou will see something like (note the non-nil id):\r\n\r\n```\r\n#<Bob id: 1, created_at: \"2015-06-02 20:11:59\", updated_at: \"2015-06-02 20:11:59\">\r\n```\r\n\r\nCheckout the second commit (dbdb961) which adds `has_many :joes` to `Bob`. In a fresh console repeat the steps above. You will see:\r\n\r\n```\r\n#<Bob id: nil, created_at: \"2015-06-02 20:15:59\", updated_at: \"2015-06-02 20:15:59\">\r\n```\r\n\r\nWe have tested under the following conditions:\r\n\r\n- Ruby 2.1.2\r\n- Rails 4.2.0 and 4.2.1\r\n- Postgres and Sqlite3\r\n\r\nWe discovered the issue while upgrading from 3.2 to 4.2.0. Rails 3.2 does not have the same inconsistency. \r\n"
  },
  {
    "url": "https://api.github.com/repos/rails/rails/issues/20418",
    "labels_url": "https://api.github.com/repos/rails/rails/issues/20418/labels{/name}",
    "comments_url": "https://api.github.com/repos/rails/rails/issues/20418/comments",
    "events_url": "https://api.github.com/repos/rails/rails/issues/20418/events",
    "html_url": "https://github.com/rails/rails/issues/20418",
    "id": 84161735,
    "number": 20418,
    "title": "Performance regression in activerecord scoping",
    "user": {
      "login": "klgilbert",
      "id": 1337012,
      "avatar_url": "https://avatars.githubusercontent.com/u/1337012?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/klgilbert",
      "html_url": "https://github.com/klgilbert",
      "followers_url": "https://api.github.com/users/klgilbert/followers",
      "following_url": "https://api.github.com/users/klgilbert/following{/other_user}",
      "gists_url": "https://api.github.com/users/klgilbert/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/klgilbert/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/klgilbert/subscriptions",
      "organizations_url": "https://api.github.com/users/klgilbert/orgs",
      "repos_url": "https://api.github.com/users/klgilbert/repos",
      "events_url": "https://api.github.com/users/klgilbert/events{/privacy}",
      "received_events_url": "https://api.github.com/users/klgilbert/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/rails/rails/labels/activerecord",
        "name": "activerecord",
        "color": "0b02e1"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": {
      "login": "rafaelfranca",
      "id": 47848,
      "avatar_url": "https://avatars.githubusercontent.com/u/47848?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rafaelfranca",
      "html_url": "https://github.com/rafaelfranca",
      "followers_url": "https://api.github.com/users/rafaelfranca/followers",
      "following_url": "https://api.github.com/users/rafaelfranca/following{/other_user}",
      "gists_url": "https://api.github.com/users/rafaelfranca/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rafaelfranca/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rafaelfranca/subscriptions",
      "organizations_url": "https://api.github.com/users/rafaelfranca/orgs",
      "repos_url": "https://api.github.com/users/rafaelfranca/repos",
      "events_url": "https://api.github.com/users/rafaelfranca/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rafaelfranca/received_events",
      "type": "User",
      "site_admin": false
    },
    "milestone": null,
    "comments": 0,
    "created_at": "2015-06-02T19:09:04Z",
    "updated_at": "2015-06-02T19:13:12Z",
    "closed_at": null,
    "body": "The Rails releases range from 3.20 to 4.2.1 and there's a decrease in performance seen throughout.\r\n\r\nThere's a regression from 4.1.10 to 4.2.0. There's an increase in total allocated objects per iteration that also occurs. At 4.2.0 iterations per second is at 27K. For allocated objects per iteration, it's 150 for 4.2.0.\r\n\r\nThe graphs seen below can be located at [rubybench.org](http://rubybench.org/rails/rails/releases?result_type=activerecord/postgres_scope \"Rubybench.org\").\r\n\r\n![activerecord_scope](https://cloud.githubusercontent.com/assets/1337012/7922652/aeab96c2-087b-11e5-8aa2-416e128e967b.png)\r\n\r\n![activerecord_scope_allocated_objects](https://cloud.githubusercontent.com/assets/1337012/7922828/c198a4f4-087c-11e5-844b-f3816074e169.png)"
  },
  {
    "url": "https://api.github.com/repos/rails/rails/issues/20417",
    "labels_url": "https://api.github.com/repos/rails/rails/issues/20417/labels{/name}",
    "comments_url": "https://api.github.com/repos/rails/rails/issues/20417/comments",
    "events_url": "https://api.github.com/repos/rails/rails/issues/20417/events",
    "html_url": "https://github.com/rails/rails/pull/20417",
    "id": 84081229,
    "number": 20417,
    "title": "Improve detection of partial templates eligible for collection caching.",
    "user": {
      "login": "dubek",
      "id": 9211,
      "avatar_url": "https://avatars.githubusercontent.com/u/9211?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dubek",
      "html_url": "https://github.com/dubek",
      "followers_url": "https://api.github.com/users/dubek/followers",
      "following_url": "https://api.github.com/users/dubek/following{/other_user}",
      "gists_url": "https://api.github.com/users/dubek/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dubek/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dubek/subscriptions",
      "organizations_url": "https://api.github.com/users/dubek/orgs",
      "repos_url": "https://api.github.com/users/dubek/repos",
      "events_url": "https://api.github.com/users/dubek/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dubek/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/rails/rails/labels/actionview",
        "name": "actionview",
        "color": "d7e102"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "milestone": {
      "url": "https://api.github.com/repos/rails/rails/milestones/34",
      "html_url": "https://github.com/rails/rails/milestones/5.0.0",
      "labels_url": "https://api.github.com/repos/rails/rails/milestones/34/labels",
      "id": 665192,
      "number": 34,
      "title": "5.0.0",
      "description": null,
      "creator": {
        "login": "rafaelfranca",
        "id": 47848,
        "avatar_url": "https://avatars.githubusercontent.com/u/47848?v=3",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rafaelfranca",
        "html_url": "https://github.com/rafaelfranca",
        "followers_url": "https://api.github.com/users/rafaelfranca/followers",
        "following_url": "https://api.github.com/users/rafaelfranca/following{/other_user}",
        "gists_url": "https://api.github.com/users/rafaelfranca/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/rafaelfranca/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/rafaelfranca/subscriptions",
        "organizations_url": "https://api.github.com/users/rafaelfranca/orgs",
        "repos_url": "https://api.github.com/users/rafaelfranca/repos",
        "events_url": "https://api.github.com/users/rafaelfranca/events{/privacy}",
        "received_events_url": "https://api.github.com/users/rafaelfranca/received_events",
        "type": "User",
        "site_admin": false
      },
      "open_issues": 96,
      "closed_issues": 109,
      "state": "open",
      "created_at": "2014-05-21T00:58:22Z",
      "updated_at": "2015-06-08T10:07:49Z",
      "due_on": null,
      "closed_at": null
    },
    "comments": 3,
    "created_at": "2015-06-02T15:50:26Z",
    "updated_at": "2015-06-09T18:59:16Z",
    "closed_at": null,
    "pull_request": {
      "url": "https://api.github.com/repos/rails/rails/pulls/20417",
      "html_url": "https://github.com/rails/rails/pull/20417",
      "diff_url": "https://github.com/rails/rails/pull/20417.diff",
      "patch_url": "https://github.com/rails/rails/pull/20417.patch"
    },
    "body": "[following a discussion in #18948]\r\n\r\nThe regular expression which was used to detect partial templates that\r\nbegin with a `<% cache ... do %>` call missed some cases.  This commits\r\nattempts to improve the detection for some cases such as multi-line\r\ncomments at the beginning of the template.  The different templates are\r\nlisted in two new unit test methods.\r\n\r\nNote that specially crafted Ruby code can still evade such `cache`-call\r\ndetection: for example, a user might have its own method which itself\r\ncalls the Rails `cache` helper. In such a case, the template's code\r\ndoesn't start with a literal `cache` string and therefore will not be\r\neligible for collection caching.\r\n\r\n@kaspth - I'd appreciate your feedback."
  },
  {
    "url": "https://api.github.com/repos/rails/rails/issues/20416",
    "labels_url": "https://api.github.com/repos/rails/rails/issues/20416/labels{/name}",
    "comments_url": "https://api.github.com/repos/rails/rails/issues/20416/comments",
    "events_url": "https://api.github.com/repos/rails/rails/issues/20416/events",
    "html_url": "https://github.com/rails/rails/issues/20416",
    "id": 83888219,
    "number": 20416,
    "title": "ActiveSupport::MessageVerifier raises \"ArgumentError: invalid byte sequence in UTF-8\" on malformed cookie",
    "user": {
      "login": "kenn",
      "id": 10350,
      "avatar_url": "https://avatars.githubusercontent.com/u/10350?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kenn",
      "html_url": "https://github.com/kenn",
      "followers_url": "https://api.github.com/users/kenn/followers",
      "following_url": "https://api.github.com/users/kenn/following{/other_user}",
      "gists_url": "https://api.github.com/users/kenn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kenn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kenn/subscriptions",
      "organizations_url": "https://api.github.com/users/kenn/orgs",
      "repos_url": "https://api.github.com/users/kenn/repos",
      "events_url": "https://api.github.com/users/kenn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kenn/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/rails/rails/labels/activesupport",
        "name": "activesupport",
        "color": "FC9300"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 1,
    "created_at": "2015-06-02T07:29:26Z",
    "updated_at": "2015-06-03T14:56:12Z",
    "closed_at": null,
    "body": "Last night, we received a bunch of error notifications like this:\r\n\r\n```ruby\r\nArgumentError: invalid byte sequence in UTF-8\r\n/gems/activesupport-4.2.1/lib/active_support/core_ext/object/blank.rb:117 in ===\r\n/gems/activesupport-4.2.1/lib/active_support/core_ext/object/blank.rb:117 in blank?\r\n/gems/activesupport-4.2.1/lib/active_support/message_verifier.rb:38 in verify\r\n/gems/activesupport-4.2.1/lib/active_support/message_encryptor.rb:64 in decrypt_and_verify\r\n/gems/actionpack-4.2.1/lib/action_dispatch/middleware/cookies.rb:535 in decrypt_and_verify\r\n/gems/actionpack-4.2.1/lib/action_dispatch/middleware/cookies.rb:516 in []\r\napp/controllers/application_controller.rb:50 in current_user\r\napp/controllers/application_controller.rb:61 in authenticate\r\n```\r\n\r\nand it turns out, the following code raises the error when an invalid string (e.g. \"\\xff\") is given as the cookie value, set by a (potentially malicious) client.\r\n\r\n```ruby\r\ndef current_user\r\n  @current_user ||= User.find_by(id: cookies.encrypted[:user_id]) if cookies[:user_id]\r\nend\r\n```\r\n\r\nConsidering that it's a client error (or an attack attempt), we shouldn't raise an error and return 500.\r\n\r\nHere's a minimal repro:\r\n\r\n```ruby\r\nverifier=ActiveSupport::MessageVerifier.new('secret')\r\nverifier.verify(\"\\xff\")\r\nArgumentError: invalid byte sequence in UTF-8\r\n```\r\n\r\nI would suggest that `MessageVerifier#verify` will check if `signed_message` is a `valid_encoding?` before checking `blank?`.\r\n\r\n```ruby\r\ndef verify(signed_message)\r\n  raise InvalidSignature if !signed_message.valid_encoding? || signed_message.blank?\r\n  ...\r\n```\r\n\r\nLet me know what you think."
  },
  {
    "url": "https://api.github.com/repos/rails/rails/issues/20411",
    "labels_url": "https://api.github.com/repos/rails/rails/issues/20411/labels{/name}",
    "comments_url": "https://api.github.com/repos/rails/rails/issues/20411/comments",
    "events_url": "https://api.github.com/repos/rails/rails/issues/20411/events",
    "html_url": "https://github.com/rails/rails/issues/20411",
    "id": 83753502,
    "number": 20411,
    "title": "PG::UnableToSend (SSL SYSCALL error: EOF detected)",
    "user": {
      "login": "christopher-b",
      "id": 618034,
      "avatar_url": "https://avatars.githubusercontent.com/u/618034?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/christopher-b",
      "html_url": "https://github.com/christopher-b",
      "followers_url": "https://api.github.com/users/christopher-b/followers",
      "following_url": "https://api.github.com/users/christopher-b/following{/other_user}",
      "gists_url": "https://api.github.com/users/christopher-b/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/christopher-b/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/christopher-b/subscriptions",
      "organizations_url": "https://api.github.com/users/christopher-b/orgs",
      "repos_url": "https://api.github.com/users/christopher-b/repos",
      "events_url": "https://api.github.com/users/christopher-b/events{/privacy}",
      "received_events_url": "https://api.github.com/users/christopher-b/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/rails/rails/labels/activerecord",
        "name": "activerecord",
        "color": "0b02e1"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 4,
    "created_at": "2015-06-02T00:05:01Z",
    "updated_at": "2015-06-03T16:18:51Z",
    "closed_at": null,
    "body": "Hi, \r\nI'm seeing intermittent Postgres errors in my rails app:\r\n\r\n```\r\nPG::UnableToSend (SSL SYSCALL error: EOF detected):\r\n  activerecord (4.2.1) lib/active_record/connection_adapters/postgresql_adapter.rb:215:in `exec'\r\n  activerecord (4.2.1) lib/active_record/connection_adapters/postgresql_adapter.rb:215:in `dealloc'\r\n  activerecord (4.2.1) lib/active_record/connection_adapters/postgresql_adapter.rb:198:in `block in clear'\r\n  activerecord (4.2.1) lib/active_record/connection_adapters/postgresql_adapter.rb:197:in `each_value'\r\n  activerecord (4.2.1) lib/active_record/connection_adapters/postgresql_adapter.rb:197:in `clear'\r\n  activerecord (4.2.1) lib/active_record/connection_adapters/postgresql_adapter.rb:258:in `clear_cache!'\r\n  activerecord (4.2.1) lib/active_record/connection_adapters/abstract_adapter.rb:291:in `reconnect!'\r\n  activerecord (4.2.1) lib/active_record/connection_adapters/postgresql_adapter.rb:275:in `reconnect!'\r\n  activerecord (4.2.1) lib/active_record/connection_adapters/abstract_adapter.rb:328:in `verify!'\r\n  activerecord (4.2.1) lib/active_record/connection_adapters/abstract/connection_pool.rb:456:in `block in checkout_and_verify'\r\n...\r\n```\r\n\r\nThese errors are resulting in very long-running requests. I've googled this error, but all the results points to a problem (#12867) that was been fixed as of version 4.1.0, or to problems with gems I'm not using (Sideqik, Sequel). I haven't found any recent reports of a similar problem.\r\n\r\nThis is a low-traffic application, and I can't see any pattern as to when the errors occur, but it may be after a period of inactivity.\r\n\r\nI'm running the following:\r\n- Rails 4.2.1\r\n- pg 0.18.2\r\n- ruby 2.2.0\r\n- PostgreSQL 9.1.11, with max_connections=200, current connections ~90\r\n- Ubuntu 14.04.2\r\n- Passenger 5.0.8\r\n\r\nStacktrace [here](https://gist.github.com/christopher-b/7cea858ff7008b85d353).\r\n\r\nDoes anyone have any idea what might be causing this, or how to track down a solution? Thanks!\r\n\r\n\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/rails/rails/issues/20407",
    "labels_url": "https://api.github.com/repos/rails/rails/issues/20407/labels{/name}",
    "comments_url": "https://api.github.com/repos/rails/rails/issues/20407/comments",
    "events_url": "https://api.github.com/repos/rails/rails/issues/20407/events",
    "html_url": "https://github.com/rails/rails/pull/20407",
    "id": 83586945,
    "number": 20407,
    "title": "Deprecate passing hash as first parameter into ActionController::Head",
    "user": {
      "login": "meinac",
      "id": 1840945,
      "avatar_url": "https://avatars.githubusercontent.com/u/1840945?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meinac",
      "html_url": "https://github.com/meinac",
      "followers_url": "https://api.github.com/users/meinac/followers",
      "following_url": "https://api.github.com/users/meinac/following{/other_user}",
      "gists_url": "https://api.github.com/users/meinac/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meinac/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meinac/subscriptions",
      "organizations_url": "https://api.github.com/users/meinac/orgs",
      "repos_url": "https://api.github.com/users/meinac/repos",
      "events_url": "https://api.github.com/users/meinac/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meinac/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 26,
    "created_at": "2015-06-01T16:22:17Z",
    "updated_at": "2015-06-10T13:01:42Z",
    "closed_at": null,
    "pull_request": {
      "url": "https://api.github.com/repos/rails/rails/pulls/20407",
      "html_url": "https://github.com/rails/rails/pull/20407",
      "diff_url": "https://github.com/rails/rails/pull/20407.diff",
      "patch_url": "https://github.com/rails/rails/pull/20407.patch"
    },
    "body": "Deprecate passing hash as first parameter into `ActionController::Head` `head` method\r\nBy deprecating this, also implicit status code will be deprecated too.\r\nSee #20372 for more information.\r\n/cc @rafaelfranca "
  },
  {
    "url": "https://api.github.com/repos/rails/rails/issues/20400",
    "labels_url": "https://api.github.com/repos/rails/rails/issues/20400/labels{/name}",
    "comments_url": "https://api.github.com/repos/rails/rails/issues/20400/comments",
    "events_url": "https://api.github.com/repos/rails/rails/issues/20400/events",
    "html_url": "https://github.com/rails/rails/issues/20400",
    "id": 83465184,
    "number": 20400,
    "title": "add_column ignores index: true",
    "user": {
      "login": "collimarco",
      "id": 90962,
      "avatar_url": "https://avatars.githubusercontent.com/u/90962?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/collimarco",
      "html_url": "https://github.com/collimarco",
      "followers_url": "https://api.github.com/users/collimarco/followers",
      "following_url": "https://api.github.com/users/collimarco/following{/other_user}",
      "gists_url": "https://api.github.com/users/collimarco/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/collimarco/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/collimarco/subscriptions",
      "organizations_url": "https://api.github.com/users/collimarco/orgs",
      "repos_url": "https://api.github.com/users/collimarco/repos",
      "events_url": "https://api.github.com/users/collimarco/events{/privacy}",
      "received_events_url": "https://api.github.com/users/collimarco/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/rails/rails/labels/activerecord",
        "name": "activerecord",
        "color": "0b02e1"
      },
      {
        "url": "https://api.github.com/repos/rails/rails/labels/docs",
        "name": "docs",
        "color": "02d7e1"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 4,
    "created_at": "2015-06-01T12:20:37Z",
    "updated_at": "2015-06-01T18:07:35Z",
    "closed_at": null,
    "body": "Using Rails 4.2.0 the `index: true` part in the following statement is completely ignored:\r\n\r\n```\r\nadd_column :my_table, :my_column, :boolean, index: true\r\n```\r\n\r\nThis happens for any type of column (e.g. `boolean`, `string`).\r\n\r\nTo reproduce this issue just create a table:\r\n\r\n```\r\nclass CreateExamples < ActiveRecord::Migration\r\n  def change\r\n    create_table :examples\r\n  end\r\nend\r\n```\r\n\r\nThen add:\r\n\r\n```\r\nclass AddSomethingToExamples < ActiveRecord::Migration\r\n  def change\r\n    add_column :examples, :something, :string, index: true\r\n  end\r\nend\r\n```\r\n\r\nRun the migrations. Then check `schema.rb`or directly the database and you won't find any index.\r\n\r\nThe documentation says:\r\n\r\n> See ActiveRecord::ConnectionAdapters::TableDefinition#column for details of the options you can use.\r\n\r\n> :index - Create an index for the column. Can be either true or an options hash."
  }
]
